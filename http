#include <stdio.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>
#include <fcntl.h>
#include <signal.h>
#include <pthread.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <sys/time.h>
#include <dirent.h>
#include <pthread.h>
#include <stdbool.h>
#define MAX 800
#define port 5555
#define SA struct sockaddr


void handle_request(int fd)
{
	printf("Server loading to connect to remote server...\n");
	struct sockaddr_in remote_server_structure;
	struct hostent* host;
	//int port = 80;
	char ip[20];
	int remote_socket_fd;
	char input_buffer[710];
	char method[300];
	char url[300];
	char final_link[300];
	char* temp=NULL;
	char version[300];
	char* sample = NULL;
	int i=0;
	int n=0;
	bool port_present = false;
        recv(fd,input_buffer,700,0);
        printf("The request recieved by client is : %s\n", input_buffer);
	sscanf(input_buffer,"%s %s %s",method,url,version);
	
	printf("The method is : %s\n", method);
	printf("The url is : %s\n", url);
	printf("The version is : %s\n", version);
	
	
	if((strncmp(method,"GET",3) == 0) && ((strncmp(version,"HTTP/1.0",8) == 0) || (strncmp(version,"HTTP/1.1",8) == 0)) && (strncmp(url,"http://",7) == 0))
	{
		
		printf("we are in this condition \n");
		
		strcpy(method,url);
		temp = strtok(url,"//");
		temp = strtok(NULL,"/");
		printf("\nURL: %s\n",temp);
		sample = strtok(NULL,"\0");
		host=gethostbyname(temp);
		strcpy(final_link,temp);
		
		int fd_file = open(temp,O_RDONLY);		
		if(fd_file < 0 || sample != NULL){
		printf("NO CACHE AVAILABLE\n");
		FILE* fp = fopen(temp,"w");
		fclose(fp);
		fd_file = open(temp,O_WRONLY);
		strcat(method,"^]");
		temp=strtok(method,"//");
		
		temp=strtok(NULL,"/");
		if(temp!=NULL)
			temp=strtok(NULL,"^]");
		
		printf("path = %s\nPort = %d\n",temp,port);


		bzero((char*)&remote_server_structure,sizeof(remote_server_structure));
		remote_server_structure.sin_port = htons((port));
		remote_server_structure.sin_family = AF_INET;
		bcopy((char*)host->h_addr,(char*)&remote_server_structure.sin_addr.s_addr,host->h_length);

		remote_socket_fd = socket(AF_INET,SOCK_STREAM, 0);
		if((connect(remote_socket_fd,(struct sockaddr*)&remote_server_structure,sizeof(struct sockaddr))) < 0)
		{
			printf("Error in connecting to remote server\n");
			return;
		}
		printf("\nConnected to %s  IP - %s\n",url,inet_ntoa(remote_server_structure.sin_addr));
		printf("Connected to remote server\n");
		bzero((char*)input_buffer,sizeof(input_buffer));
		if(temp!=NULL)
			sprintf(input_buffer,"GET /%s %s\r\nHost: %s\r\nConnection:alive\r\n\r\n",temp,version,final_link);
		else
			sprintf(input_buffer,"GET / %s\r\nHost: %s\r\nConnection: alive\r\n\r\n",version,final_link);
		write(remote_socket_fd,input_buffer,strlen(input_buffer));
		printf("%s\n",input_buffer);
		do
		{
			bzero((char*)input_buffer,700);
			n=recv(remote_socket_fd,input_buffer,700,0);
			if(!(n<=0)){
				send(fd,input_buffer,n,0);
				write(fd_file,input_buffer,n);
			}
		}while(n>0);
		close(fd_file);
		}
		else
		{
			printf("CACHE MEMORY FOUND\n");
			do
			{
			bzero((char*)input_buffer,700);
			n=read(fd_file,input_buffer,700);
			if(!(n<=0)){
				send(fd,input_buffer,n,0);
			}
			}while(n>0);
			printf("DATA SENT FROM CACHE\n");
			close(fd_file);
		}
		
	}
	else
	{
		write(fd,"400 : BAD REQUEST\n",19);
	}
	
	
}



int main()
{
	int sockfd , connfd, len;
	struct sockaddr_in servaddr, cli;
	if((sockfd=socket(AF_INET,SOCK_STREAM,0))<0)
	{
		printf("socket creation failed.....\n");
		exit(0);
	}
	else
	printf("socket successfully created...\n");
	bzero(&servaddr, sizeof(servaddr));
	
	servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");
	servaddr.sin_port = htons(port);
	
	
	if ((bind(sockfd, (SA*)&servaddr, sizeof(servaddr))) != 0) {
        printf("socket bind failed...\n");
        exit(0);
	    }
	else
	printf("Socket successfully binded..\n");
	
	if((listen(sockfd, 1)) != 0)
	{
		printf("listen failed...\n");
		exit(0);
	}
	else
	{
		printf("server listening...\n");
	}
	len = sizeof(cli);
	
	
	/*if(connfd < 0)
	{
		printf("server accept failed....\n");
		exit(0);
	}
	else
	{
	printf("server accept the client....\n");
	}
	*/
	/*while(1)
	{
		char buff[MAX];
    		int n;
		
		connfd = accept(sockfd, (SA*) &cli, &len);
		
		recv(connfd, buff, MAX, 0);
		printf("The request recieved by client is : %s\n", buff);
		
	}
	*/
	printf("Server in waiting State\n");
		connfd  = accept(sockfd, (SA*) &cli, &len);
	while(1)
	{
	    
			printf("Connected to client with fd: %d\n",connfd);
			close(sockfd);
			handle_request(connfd);
			close(connfd);
			exit(0);
		//close(client_fd);
		
	}
	
	
}
